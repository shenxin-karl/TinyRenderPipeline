// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LightingPassCS

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> gBuffer0;
Texture2D<float4> gBuffer1;
Texture2D<float4> gBuffer2;
Texture2D<float>  gDepthMap;
RWTexture2D<float4> gOutputMap;

struct ComputeIn {
    uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
    uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
    uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
    uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[numthreads(8,8,1)]
void LightingPassCS (ComputeIn cin)
{
    gOutputMap[cin.DispatchThreadID.xy] = gBuffer0[cin.DispatchThreadID.xy];
}
