// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ComputeIn {
    uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
    uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
    uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
    uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

sampler2D gPanoramaMap;
RWTexture2DArray<float4> gResult;

static const float InvPI = 0.31830988618379067153776752674503f;
static const float Inv2PI = 0.15915494309189533576888376337251f;
static const float2 InvAtan = float2(Inv2PI, InvPI);

const static float3x3 gRotateCubeFace[6] = {
    float3x3(float3(+0, +0, +1), float3(+0, -1, +0), float3(-1, +0, +0) ),   // +X
    float3x3(float3(+0, +0, -1), float3(+0, -1, +0), float3(+1, +0, +0) ),   // -X
    float3x3(float3(+1, +0, +0), float3(+0, +0, +1), float3(+0, +1, +0) ),   // +Y
    float3x3(float3(+1, +0, +0), float3(+0, +0, -1), float3(+0, -1, +0) ),   // -Y
    float3x3(float3(+1, +0, +0), float3(+0, -1, +0), float3(+0, +0, +1) ),   // +Z
    float3x3(float3(-1, +0, +0), float3(+0, -1, +0), float3(+0, +0, -1) )    // -Z
};

float3 GetDirection(ComputeIn cin) {
    float3 texDims; 
    gResult.GetDimensions(texDims.x, texDims.y, texDims.z);
    
    float3 dir = float3( cin.DispatchThreadID.xy / texDims.xy - 0.5f, 0.5f);
    float3 direction = normalize(mul(gRotateCubeFace[cin.DispatchThreadID.z], dir)); 
    return direction;
}

[numthreads(8,8,1)]
void CSMain(ComputeIn cin) {
    float3 direction = GetDirection(cin);
    
    // Convert the world space direction into U,V texture coordinates in the panoramic texture.
    // Source: http://gl.ict.usc.edu/Data/HighResProbes/
    float2 panoUV = float2(atan2(-direction.x, -direction.z), acos(direction.y)) * InvAtan;
    float4 color = tex2Dlod(gPanoramaMap, float4(panoUV, 0, 0));
    gResult[cin.DispatchThreadID.xyz] = color;
}
